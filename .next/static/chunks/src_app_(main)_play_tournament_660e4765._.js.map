{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/sleeps/ft_transcendence0/src/app/%28main%29/play/tournament/TournamentBracket.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport {MATCH_STATES} from '../../../../data/mockData';\n\nexport function MobileBracket({ \n  rounds,\n  currentRound,\n  getMatch,\n  getMatchStateStyle,\n  participants,\n  getPlayerStyle,\n  getPlayerBgStyle,\n  onPlayMatch,\n  tournamentSize \n}) {\n  return (\n    <div className=\"flex flex-col items-center mt-4 p-2 bg-gray-800/80 rounded-lg border border-gray-700 w-full\">\n      <h3 className=\"text-white text-xl mb-3 text-center\">Tournament Bracket</h3>\n      <div className=\"text-white text-sm mb-2\">Current Round: {currentRound + 1}</div>\n      \n      {/* Mobile vertical bracket */}\n      <div className=\"flex flex-col w-full space-y-4\">\n        {Array.from({ length: rounds }).map((_, roundIndex) => {\n          const matchesInRound = tournamentSize / Math.pow(2, roundIndex + 1);\n          \n          return (\n            <div key={`round-${roundIndex}`} className=\"w-full\">\n              <div className=\"text-indigo-300 text-sm font-medium mb-2 pl-1\">\n                {roundIndex === rounds - 1 ? \"Final\" : \n                  roundIndex === rounds - 2 ? \"Semi Finals\" : \n                  `Round ${roundIndex + 1}`}\n              </div>\n              \n              <div className=\"flex flex-col space-y-3\">\n                {Array.from({ length: matchesInRound }).map((_, matchIndex) => {\n                  const match = getMatch(roundIndex, matchIndex);\n                  const matchStateClass = match ? getMatchStateStyle(match.state) : \"border-green-400/50 bg-gray-700/50\";\n                  const isCurrentRound = roundIndex === currentRound;\n                  \n                  // Get players for this match\n                  let player1, player2;\n                  \n                  if (roundIndex === 0) {\n                    // First round pulls directly from participants\n                    const player1Index = matchIndex * 2;\n                    const player2Index = player1Index + 1;\n                    player1 = player1Index < participants.length ? participants[player1Index] : null;\n                    player2 = player2Index < participants.length ? participants[player2Index] : null;\n                  } else {\n                    // Look for winners from previous round\n                    const prevRound = roundIndex - 1;\n                    const prevMatchIndex1 = matchIndex * 2;\n                    const prevMatchIndex2 = prevMatchIndex1 + 1;\n                    \n                    const prevMatch1 = getMatch(prevRound, prevMatchIndex1);\n                    const prevMatch2 = getMatch(prevRound, prevMatchIndex2);\n                    \n                    if (prevMatch1 && prevMatch1.state === MATCH_STATES.PLAYER1_WIN) {\n                      player1 = prevMatch1.player1;\n                    } else if (prevMatch1 && prevMatch1.state === MATCH_STATES.PLAYER2_WIN) {\n                      player1 = prevMatch1.player2;\n                    }\n                    \n                    if (prevMatch2 && prevMatch2.state === MATCH_STATES.PLAYER1_WIN) {\n                      player2 = prevMatch2.player1;\n                    } else if (prevMatch2 && prevMatch2.state === MATCH_STATES.PLAYER2_WIN) {\n                      player2 = prevMatch2.player2;\n                    }\n                  }\n                  \n                  const player1Style = match ? getPlayerStyle(match, true) : \"text-gray-300\";\n                  const player2Style = match ? getPlayerStyle(match, false) : \"text-gray-300\";\n                  \n                  const player1BgStyle = match ? getPlayerBgStyle(match, true) : \"\";\n                  const player2BgStyle = match ? getPlayerBgStyle(match, false) : \"\";\n\n                  const player1BorderColor = player1BgStyle.includes(\"bg-\") \n                    ? player1BgStyle.replace(\"bg-\", \"border-\") \n                    : \"border-green-400/50\";\n                  \n                  const player2BorderColor = player2BgStyle.includes(\"bg-\") \n                    ? player2BgStyle.replace(\"bg-\", \"border-\") \n                    : \"border-green-400/50\";\n                  \n                  return (\n                    <div \n                      key={`match-${roundIndex}-${matchIndex}`}\n                      className={`flex flex-col ${matchStateClass} rounded overflow-hidden ${isCurrentRound ? 'hover:brightness-110 transition-all cursor-pointer' : ''}`}\n                      onClick={() => isCurrentRound && match.player1 && match.player2 && onPlayMatch && onPlayMatch(match)}\n                    >\n                      {/* Match header */}\n                      <div className=\"bg-black text-gray-300 text-xs font-medium px-2 py-1 border-b border-gray-700\">\n                        Match {matchIndex + 1}\n                      </div>\n                      \n                      {/* Players container */}\n                      <div className=\"flex flex-col\">\n                        <div \n                          className={`py-2 px-3 border-b ${player1BorderColor} ${player1BgStyle}`}\n                        >\n                          <div className={`text-sm font-medium truncate ${player1Style}`}>\n                            {player1 ? player1.login : \"TBD\"}\n                          </div>\n                        </div>\n                        <div className=\"h-px bg-gray-600 w-full\"></div>\n                        <div \n                          className={`py-2 px-3 ${player2BorderColor} ${player2BgStyle}`}\n                        >\n                          <div className={`text-sm font-medium truncate ${player2Style}`}>\n                            {player2 ? player2.login : \"TBD\"}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Legend for bracket */}\n      <div className=\"flex flex-wrap items-center justify-center mt-4 text-xs space-x-2 space-y-1\">\n        <div className=\"flex items-center mt-1\">\n          <div className=\"w-3 h-3 rounded-full bg-gray-400 mr-1\"></div>\n          <span className=\"text-gray-300\">Waiting</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 rounded-full bg-yellow-400 mr-1\"></div>\n          <span className=\"text-yellow-300\">In Progress</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 rounded-full bg-green-400 mr-1\"></div>\n          <span className=\"text-green-300\">Winner</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 rounded-full bg-red-400 mr-1\"></div>\n          <span className=\"text-red-300\">Eliminated</span>\n        </div>\n      </div>\n      \n      <div className=\"text-gray-400 text-xs mt-2\">Click on a match to simulate the game</div>\n    </div>\n  );\n}\n\nexport function DesktopBracket({\n    currentRound,\n    bracketHeight,\n    rounds,\n    roundWidth,\n    tournamentSize,\n    participants,\n    getMatch,\n    getMatchStateStyle,\n    getPlayerStyle,\n    getPlayerBgStyle,\n    onPlayMatch,\n    matchHeight\n}) {\n    \n    // Increase match height for better visibility\n    const adjustedMatchHeight = matchHeight * 1.5;\n    \n    return (\n        <div className=\"flex flex-col items-center mt-4 p-4 bg-gray-800/80 rounded-lg border border-gray-700 overflow-x-auto w-full\">\n          <h3 className=\"text-white text-xl md:text-2xl mb-3 text-center\">Tournament Bracket</h3>\n          <div className=\"text-white text-sm mb-2\">Current Round: {currentRound + 1}</div>\n          \n          <div className=\"relative min-w-full\" style={{ height: `${bracketHeight * 1.5}px`, minWidth: `${(rounds * 2 + 1) * roundWidth}px` }}>\n            {/* Left side of the bracket */}\n            {Array.from({ length: rounds }).map((_, roundIndex) => {\n              const matchesInRound = tournamentSize / Math.pow(2, roundIndex + 1);\n              \n              return (\n                <div \n                  key={`left-${roundIndex}`}\n                  className=\"absolute top-0 bottom-0 flex flex-col justify-around\"\n                  style={{ left: `${roundIndex * roundWidth}px`, width: `${roundWidth - 20}px` }}\n                >\n                  {Array.from({ length: matchesInRound / 2 }).map((_, matchIndex) => {\n                    const actualMatchIndex = matchIndex;\n                    const match = getMatch(roundIndex, actualMatchIndex);\n                    \n                    const matchStateClass = match ? getMatchStateStyle(match.state) : \"border-indigo-400/50 bg-gray-700/50\";\n                    const isCurrentRound = roundIndex === currentRound;\n                    \n                    // Get players for this match\n                    let player1, player2;\n                    \n                    if (roundIndex === 0) {\n                      // First round pulls directly from participants\n                      const player1Index = matchIndex * 2;\n                      const player2Index = player1Index + 1;\n                      player1 = player1Index < participants.length ? participants[player1Index] : null;\n                      player2 = player2Index < participants.length ? participants[player2Index] : null;\n                    } else {\n                      // Look for winners from previous round\n                      const prevRound = roundIndex - 1;\n                      const prevMatchIndex1 = matchIndex * 2;\n                      const prevMatchIndex2 = prevMatchIndex1 + 1;\n                      \n                      const prevMatch1 = getMatch(prevRound, prevMatchIndex1);\n                      const prevMatch2 = getMatch(prevRound, prevMatchIndex2);\n                      \n                      if (prevMatch1 && prevMatch1.state === MATCH_STATES.PLAYER1_WIN) {\n                        player1 = prevMatch1.player1;\n                      } else if (prevMatch1 && prevMatch1.state === MATCH_STATES.PLAYER2_WIN) {\n                        player1 = prevMatch1.player2;\n                      }\n                      \n                      if (prevMatch2 && prevMatch2.state === MATCH_STATES.PLAYER1_WIN) {\n                        player2 = prevMatch2.player1;\n                      } else if (prevMatch2 && prevMatch2.state === MATCH_STATES.PLAYER2_WIN) {\n                        player2 = prevMatch2.player2;\n                      }\n                    }\n                    \n                    player1 = match && match.player1 ? match.player1 : player1;\n                    player2 = match && match.player2 ? match.player2 : player2;\n                    \n                    const player1Style = match ? getPlayerStyle(match, true) : \"text-gray-300\";\n                    const player2Style = match ? getPlayerStyle(match, false) : \"text-gray-300\";\n                    \n                    const player1BgStyle = match ? getPlayerBgStyle(match, true) : \"\";\n                    const player2BgStyle = match ? getPlayerBgStyle(match, false) : \"\";\n\n                    const player1BorderColor = player1BgStyle.includes(\"bg-\") \n                      ? player1BgStyle.replace(\"bg-\", \"border-\") \n                      : \"border-indigo-400/50\";\n                    \n                    const player2BorderColor = player2BgStyle.includes(\"bg-\") \n                      ? player2BgStyle.replace(\"bg-\", \"border-\") \n                      : \"border-indigo-400/50\";\n                    \n                    return (\n                      <div \n                        key={matchIndex} \n                        className={`${matchStateClass} mb-6 rounded-lg shadow-lg overflow-hidden ${isCurrentRound ? 'hover:brightness-110 cursor-pointer transform hover:scale-105 transition-transform' : ''}`}\n                        onClick={() => isCurrentRound && match.player1 && match.player2 && onPlayMatch && onPlayMatch(match)}\n                      >\n                        {/* Match header */}\n                        <div className=\"bg-black text-gray-300 text-xs font-medium px-2 py-1 border-b border-gray-700\">\n                          Match {matchIndex + 1}\n                        </div>\n                        \n                        <div \n                          className={`p-2 ${player1BgStyle} border-b border-gray-600`}\n                          style={{ minHeight: `${adjustedMatchHeight/2}px` }}\n                        >\n                          <div className={`text-sm md:text-base truncate ${player1Style} font-medium`}>\n                            {player1 ? player1.login : \"TBD\"}\n                          </div>\n                        </div>\n                        <div \n                          className={`p-2 ${player2BgStyle}`}\n                          style={{ minHeight: `${adjustedMatchHeight/2}px` }}\n                        >\n                          <div className={`text-sm md:text-base truncate ${player2Style} font-medium`}>\n                            {player2 ? player2.login : \"TBD\"}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              );\n            })}\n            \n            {/* Center/Final */}\n            <div \n              className=\"absolute top-0 bottom-0 flex flex-col justify-center\"\n              style={{ left: `${rounds * roundWidth}px`, width: `${roundWidth}px` }}\n            >\n              {/* Final match */}\n              <div \n                className={`shadow-lg ${\n                  getMatch(rounds - 1, 0) ? getMatchStateStyle(getMatch(rounds - 1, 0).state) : \"border-yellow-400\"\n                } rounded-lg mx-1 overflow-hidden flex flex-col ${currentRound === rounds - 1 ? 'hover:brightness-110 cursor-pointer transform hover:scale-105 transition-transform' : ''}`}\n                onClick={() => currentRound === rounds - 1 && onPlayMatch(rounds - 1, 0)}\n              >\n                <div className=\"text-yellow-400 text-sm md:text-lg text-center font-bold bg-black p-2 border-b border-yellow-500/50\">\n                  FINAL\n                </div>\n                \n                {/* Final Players */}\n                {(() => {\n                  const finalMatch = getMatch(rounds - 1, 0);\n                  const player1 = finalMatch?.player1;\n                  const player2 = finalMatch?.player2;\n                  \n                  const player1Style = finalMatch ? getPlayerStyle(finalMatch, true) : \"text-gray-300\";\n                  const player2Style = finalMatch ? getPlayerStyle(finalMatch, false) : \"text-gray-300\";\n                  \n                  const player1BgStyle = finalMatch ? getPlayerBgStyle(finalMatch, true) : \"\";\n                  const player2BgStyle = finalMatch ? getPlayerBgStyle(finalMatch, false) : \"\";\n\n                  return (\n                    <>\n                      <div className={`p-3 ${player1BgStyle} border-b border-gray-600`} style={{ minHeight: `${adjustedMatchHeight/2}px` }}>\n                        <div className={`text-sm md:text-base text-center font-medium ${player1Style}`}>\n                          {player1 ? player1.login : \"TBD\"}\n                        </div>\n                      </div>\n                      <div className={`p-3 ${player2BgStyle}`} style={{ minHeight: `${adjustedMatchHeight/2}px` }}>\n                        <div className={`text-sm md:text-base text-center font-medium ${player2Style}`}>\n                          {player2 ? player2.login : \"TBD\"}\n                        </div>\n                      </div>\n                    </>\n                  );\n                })()}\n                \n                {/* Champion */}\n                {getMatch(rounds - 1, 0) && (getMatch(rounds - 1, 0).state === MATCH_STATES.PLAYER1_WIN || \n                                            getMatch(rounds - 1, 0).state === MATCH_STATES.PLAYER2_WIN) && (\n                  <div className=\"text-green-300 text-xs md:text-base border-t border-green-500/50 font-bold text-center p-2 bg-green-900/30\">\n                    Champion: {getMatch(rounds - 1, 0).state === MATCH_STATES.PLAYER1_WIN \n                      ? getMatch(rounds - 1, 0).player1?.login \n                      : getMatch(rounds - 1, 0).player2?.login}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Right side of the bracket */}\n            {Array.from({ length: rounds }).map((_, roundIndex) => {\n              const matchesInRound = tournamentSize / Math.pow(2, roundIndex + 1);\n              \n              return (\n                <div \n                  key={`right-${roundIndex}`}\n                  className=\"absolute top-0 bottom-0 flex flex-col justify-around\"\n                  style={{ left: `${(rounds * 2) * roundWidth - (roundIndex * roundWidth)}px`, width: `${roundWidth - 20}px` }}\n                >\n                  {Array.from({ length: matchesInRound / 2 }).map((_, matchIndex) => {\n                    // For the right side, we need to shift the matchIndex to the second half of matches in this round\n                    const actualMatchIndex = matchIndex + (matchesInRound / 2);\n                    const match = getMatch(roundIndex, actualMatchIndex);\n                    \n                    const matchStateClass = match ? getMatchStateStyle(match.state) : \"border-indigo-400/50 bg-gray-700/50\";\n                    const isCurrentRound = roundIndex === currentRound;\n                    \n                    // Get players for this match\n                    let player1, player2;\n                    \n                    if (roundIndex === 0) {\n                      // First round pulls directly from participants\n                      const halfPoint = participants.length / 2;\n                      const player1Index = halfPoint + (matchIndex * 2);\n                      const player2Index = player1Index + 1;\n                      player1 = player1Index < participants.length ? participants[player1Index] : null;\n                      player2 = player2Index < participants.length ? participants[player2Index] : null;\n                    } else {\n                      // Look for winners from previous round (right side)\n                      const prevRound = roundIndex - 1;\n                      const prevMatchesPerHalf = matchesInRound;\n                      const prevMatchIndex1 = prevMatchesPerHalf / 2 + (matchIndex * 2);\n                      const prevMatchIndex2 = prevMatchIndex1 + 1;\n                      \n                      const prevMatch1 = getMatch(prevRound, prevMatchIndex1);\n                      const prevMatch2 = getMatch(prevRound, prevMatchIndex2);\n                      \n                      if (prevMatch1 && prevMatch1.state === MATCH_STATES.PLAYER1_WIN) {\n                        player1 = prevMatch1.player1;\n                      } else if (prevMatch1 && prevMatch1.state === MATCH_STATES.PLAYER2_WIN) {\n                        player1 = prevMatch1.player2;\n                      }\n                      \n                      if (prevMatch2 && prevMatch2.state === MATCH_STATES.PLAYER1_WIN) {\n                        player2 = prevMatch2.player1;\n                      } else if (prevMatch2 && prevMatch2.state === MATCH_STATES.PLAYER2_WIN) {\n                        player2 = prevMatch2.player2;\n                      }\n                    }\n                    \n                    // Use match players if available\n                    player1 = match && match.player1 ? match.player1 : player1;\n                    player2 = match && match.player2 ? match.player2 : player2;\n                    \n                    const player1Style = match ? getPlayerStyle(match, true) : \"text-gray-300\";\n                    const player2Style = match ? getPlayerStyle(match, false) : \"text-gray-300\";\n                    \n                    const player1BgStyle = match ? getPlayerBgStyle(match, true) : \"\";\n                    const player2BgStyle = match ? getPlayerBgStyle(match, false) : \"\";\n\n                    const player1BorderColor = player1BgStyle.includes(\"bg-\") \n                      ? player1BgStyle.replace(\"bg-\", \"border-\") \n                      : \"border-indigo-400/50\";\n                    \n                    const player2BorderColor = player2BgStyle.includes(\"bg-\") \n                      ? player2BgStyle.replace(\"bg-\", \"border-\") \n                      : \"border-indigo-400/50\";\n                    \n                    return (\n                      <div \n                        key={matchIndex}\n                        className={`${matchStateClass} mb-6 rounded-lg shadow-lg overflow-hidden ${isCurrentRound ? 'hover:brightness-110 cursor-pointer transform hover:scale-105 transition-transform' : ''}`}\n                        onClick={() => isCurrentRound && match.player1 && match.player2 && onPlayMatch && onPlayMatch(match)}\n                      >\n                        {/* Match header */}\n                        <div className=\"bg-black text-gray-300 text-xs font-medium px-2 py-1 border-b border-gray-700\">\n                          Match {actualMatchIndex + 1}\n                        </div>\n                        \n                        <div \n                          className={`p-2 ${player1BgStyle} border-b border-gray-600`}\n                          style={{ minHeight: `${adjustedMatchHeight/2}px` }}\n                        >\n                          <div className={`text-sm md:text-base truncate ${player1Style} font-medium`}>\n                            {player1 ? player1.login : \"TBD\"}\n                          </div>\n                        </div>\n                        <div \n                          className={`p-2 ${player2BgStyle}`}\n                          style={{ minHeight: `${adjustedMatchHeight/2}px` }}\n                        >\n                          <div className={`text-sm md:text-base truncate ${player2Style} font-medium`}>\n                            {player2 ? player2.login : \"TBD\"}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n          \n          {/* Legend for bracket */}\n          <div className=\"flex flex-wrap items-center justify-center mt-6 text-xs md:text-sm space-x-4 space-y-2 md:space-y-0\">\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full bg-gray-400 mr-2\"></div>\n              <span className=\"text-gray-300\">Waiting</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full bg-yellow-400 mr-2\"></div>\n              <span className=\"text-yellow-300\">In Progress</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full bg-green-400 mr-2\"></div>\n              <span className=\"text-green-300\">Winner</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full bg-red-400 mr-2\"></div>\n              <span className=\"text-red-300\">Eliminated</span>\n            </div>\n          </div>\n          \n          <div className=\"text-gray-400 text-sm mt-3\">Click on a match to simulate the game</div>\n        </div>\n      );\n}\n\nconst TournamentBracket = ({ \n  participants, \n  tournamentSize, \n  matches,  \n  currentRound, \n  onMatchUpdate,\n  onPlayMatch // <-- this prop is passed from LocalTournament\n}) => {\n  const [windowWidth, setWindowWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 1024);\nconst [isMobile, setIsMobile] = useState(typeof window !== 'undefined' ? window.innerWidth < 768 : false);\nconst [isTablet, setIsTablet] = useState(typeof window !== 'undefined' ? window.innerWidth >= 768 && window.innerWidth < 1024 : false);\n\nuseEffect(() => {\n  if (typeof window === 'undefined') return;\n    \n  const handleResize = () => {\n    setWindowWidth(window.innerWidth);\n    setIsMobile(window.innerWidth < 768);\n    setIsTablet(window.innerWidth >= 768 && window.innerWidth < 1024);\n  };\n    \n  window.addEventListener('resize', handleResize);\n  return () => window.removeEventListener('resize', handleResize);\n}, []);\n\nconst validTournamentSize = (() => {\n  let size = 2;\n  while (size < participants.length) {\n    size *= 2;\n  }\n  return size;\n})();\n\nconst rounds = Math.log2(tournamentSize);\n\nconst getSpacing = () => {\n  if (windowWidth < 640) return { roundWidth: 80, matchHeight: 30, bracketHeight: rounds * 80 };\n  if (windowWidth < 768) return { roundWidth: 90, matchHeight: 32, bracketHeight: rounds * 90 };\n  if (windowWidth < 1024) return { roundWidth: 100, matchHeight: 35, bracketHeight: rounds * 100 };\n  return { roundWidth: 120, matchHeight: 40, bracketHeight: rounds * 120 };\n};\n  const { roundWidth, matchHeight, bracketHeight } = getSpacing();\n  \n  const getMatchStateStyle = (matchState) => {\n    switch(matchState) {\n      case MATCH_STATES.IN_PROGRESS:\n        return \"border-yellow-400 bg-yellow-900/30\";\n      case MATCH_STATES.PLAYER1_WIN:\n        return \"border-green-400 bg-green-900/30\";\n      case MATCH_STATES.PLAYER2_WIN:\n        return \"border-green-400 bg-green-900/30\";\n      default:\n        return \"border-indigo-400/50 bg-gray-700/50\";\n    }\n  };\n  \n  const getPlayerStyle = (match, isPlayer1) => {\n    if (!match || !match.state) return \"text-gray-300\";\n\n    const won = (match.state === MATCH_STATES.PLAYER1_WIN && isPlayer1) ||\n                (match.state === MATCH_STATES.PLAYER2_WIN && !isPlayer1);\n\n    const lost = (match.state === MATCH_STATES.PLAYER1_WIN && !isPlayer1) ||\n                 (match.state === MATCH_STATES.PLAYER2_WIN && isPlayer1);\n\n    if (won) return \"text-green-400 font-bold\";\n    if (lost) return \"text-red-400 line-through\";\n\n    if (match.state === MATCH_STATES.IN_PROGRESS) return \"text-yellow-300 italic\";\n    return \"text-gray-300\";\n  }\n  \n  const getPlayerBgStyle = (match, isPlayer1) => {\n    if (!match || !match.state) return \"\";\n  \n    const won = (match.state === MATCH_STATES.PLAYER1_WIN && isPlayer1) ||\n                (match.state === MATCH_STATES.PLAYER2_WIN && !isPlayer1);\n  \n    const lost = (match.state === MATCH_STATES.PLAYER1_WIN && !isPlayer1) ||\n                 (match.state === MATCH_STATES.PLAYER2_WIN && isPlayer1);\n  \n    if (won) return \"bg-green-900/30\";\n    if (lost) return \"bg-red-900/30 border-red-400\";\n  \n    if (match.state === MATCH_STATES.IN_PROGRESS) return \"bg-yellow-900/30 animate-pulse\";\n    return \"bg-gray-700/30\";\n  }\n  \n  const getMatch = (roundIndex, matchIndex) => {\n    return matches.find(m => \n      m.round === roundIndex && m.matchIndex === matchIndex\n    );\n  };\n  \n  // Remove simulateMatch and related logic.\n  // Instead, use onPlayMatch(match) for current round matches.\n\n  if (isMobile) {\n    return (\n      <MobileBracket \n        rounds={rounds}\n        currentRound={currentRound} \n        getMatch={getMatch} \n        getMatchStateStyle={getMatchStateStyle}\n        participants={participants}\n        getPlayerStyle={getPlayerStyle}\n        getPlayerBgStyle={getPlayerBgStyle}\n        onPlayMatch={onPlayMatch}\n        tournamentSize={validTournamentSize} \n      />\n    );\n  }\n  \n  return (\n    <DesktopBracket\n      currentRound={currentRound}\n      bracketHeight={bracketHeight}\n      rounds={rounds}\n      roundWidth={roundWidth}\n      tournamentSize={validTournamentSize}\n      participants={participants}\n      getMatch={getMatch}\n      getMatchStateStyle={getMatchStateStyle}\n      getPlayerStyle={getPlayerStyle}\n      getPlayerBgStyle={getPlayerBgStyle}\n      onPlayMatch={onPlayMatch}\n      matchHeight={matchHeight} \n    />\n  );\n};\n\nexport default TournamentBracket;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 930, "column": 0}, "map": {"version":3,"sources":["file:///home/sleeps/ft_transcendence0/src/app/%28main%29/play/tournament/LocalTournament.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { user } from '@/data/mockData';\nimport {MATCH_STATES} from '../../../../data/mockData';\nimport TournamentBracket from './TournamentBracket';\n\n// Tournament Bracket Component for Local Tournament\n\nconst ParticipantItem = ({ player, removeParticipant, changeParticipantName }) => {\n  return (\n    <div className=\"flex items-center bg-[#1a1d23] rounded-lg p-3 hover:bg-[#2a2f3a] transition-all border border-gray-700/50\">\n      <div className=\"w-10 h-10 rounded-full bg-[#2a2f3a] flex-shrink-0 overflow-hidden mr-3 border border-gray-600\">\n        <Image \n          src={player.avatar} \n          alt={player.login} \n          width={40}  \n          height={40}\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      <div className=\"flex-grow\">\n        <input \n          type=\"text\" \n          value={player.login}\n          onChange={(e) => changeParticipantName(player.id, e.target.value)}\n          className=\"bg-[#2a2f3a] text-white rounded-lg px-3 py-2 w-full outline-none focus:ring-2 focus:ring-blue-500 border border-gray-600 text-sm placeholder-gray-400\"\n          minLength={1}\n          required\n          placeholder=\"Enter player name\"\n        />\n      </div>\n      {!player.is_user && (\n        <button \n          onClick={() => removeParticipant(player.id)}\n          className=\"ml-2 text-red-400 hover:text-red-300 transition-colors p-1 rounded-lg hover:bg-red-400/10\"\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n          </svg>\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst RoundControls = ({ currentRound, totalRounds, onAdvanceRound, canAdvance }) => {\n  return (\n    <div className=\"flex items-center justify-center mb-6 bg-[#1a1d23] rounded-lg p-4 border border-gray-700/50\">\n      <div className=\"flex items-center space-x-3\">\n        <span className=\"text-white text-lg\">Round:</span>\n        <span className=\"text-blue-400 font-bold text-xl\">{currentRound + 1}/{totalRounds}</span>\n      </div>\n      \n      <button\n        onClick={onAdvanceRound}\n        disabled={!canAdvance}\n        className={`ml-6 px-6 py-2 rounded-lg text-white font-medium transition-colors ${\n          canAdvance\n            ? 'bg-blue-600 hover:bg-blue-700'\n            : 'bg-gray-600 cursor-not-allowed opacity-50'\n        }`}\n      >\n        {currentRound + 1 === totalRounds ? \"End Tournament\" : \"Next Round\"}\n      </button>\n    </div>\n  );\n};\n\nconst LocalTournamentMode = () => {\n  const [participants, setParticipants] = useState([\n    { id: crypto.randomUUID(), login: user.name, avatar: user.avatar, ready: true, is_user: true}\n  ]);\n  const [tournamentName, setTournamentName] = useState(\"Local Pong Championship\");\n  const [tournamentSize, setTournamentSize] = useState(4);\n  const [tournamentStarted, setTournamentStarted] = useState(false);\n  const [currentRound, setCurrentRound] = useState(0);\n  const [matches, setMatches] = useState([]);\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [champion, setChampion] = useState(null);\n  const [playingMatch, setPlayingMatch] = useState(null);\n  \n  const totalRounds = Math.log2(tournamentSize);\n  \n  // Initialize tournament matches\n  const initializeTournament = () => {\n    const initialMatches = [];\n    \n    // Create first round matches\n    for (let i = 0; i < tournamentSize / 2; i++) {\n      const player1 = participants[i * 2] || null;\n      const player2 = participants[i * 2 + 1] || null;\n      \n      initialMatches.push({\n        id: crypto.randomUUID(),\n        round: 0,\n        matchIndex: i,\n        player1: player1,\n        player2: player2,\n        state: MATCH_STATES.WAITING\n      });\n    }\n    \n    // Create placeholder matches for future rounds\n    for (let round = 1; round < totalRounds; round++) {\n      const matchesInRound = tournamentSize / Math.pow(2, round + 1);\n      \n      for (let i = 0; i < matchesInRound; i++) {\n        initialMatches.push({\n          id: crypto.randomUUID(),\n          round: round,\n          matchIndex: i,\n          player1: null,\n          player2: null,\n          state: MATCH_STATES.WAITING\n        });\n      }\n    }\n    \n    setMatches(initialMatches);\n    setTournamentStarted(true);\n  };\n  \n  // Update match state and propagate winners to next round\n  const handleMatchUpdate = (roundIndex, matchIndex, newState) => {\n    setMatches(prevMatches => {\n      const updatedMatches = [...prevMatches];\n      const matchToUpdateIndex = updatedMatches.findIndex(\n        m => m.round === roundIndex && m.matchIndex === matchIndex\n      );\n      \n      if (matchToUpdateIndex === -1) return prevMatches;\n      \n      const matchToUpdate = { ...updatedMatches[matchToUpdateIndex] };\n      matchToUpdate.state = newState;\n      updatedMatches[matchToUpdateIndex] = matchToUpdate;\n      \n      // If we have a winner, update next round's match\n      if (newState === MATCH_STATES.PLAYER1_WIN || newState === MATCH_STATES.PLAYER2_WIN) {\n        const winner = newState === MATCH_STATES.PLAYER1_WIN ? matchToUpdate.player1 : matchToUpdate.player2;\n        \n        // Check if this is the final match\n        if (roundIndex === totalRounds - 1) {\n          setChampion(winner);\n          setTournamentComplete(true);\n        }\n        // Calculate position in next round\n        else if (roundIndex < totalRounds - 1) {\n          const nextRound = roundIndex + 1;\n          const nextMatchIndex = Math.floor(matchIndex / 2);\n          const isFirstMatchOfPair = matchIndex % 2 === 0;\n          \n          const nextMatchIndex2 = updatedMatches.findIndex(\n            m => m.round === nextRound && m.matchIndex === nextMatchIndex\n          );\n          \n          if (nextMatchIndex2 !== -1) {\n            const nextMatch = { ...updatedMatches[nextMatchIndex2] };\n            \n            // Update player1 or player2 based on which match this was\n            if (isFirstMatchOfPair) {\n              nextMatch.player1 = winner;\n            } else {\n              nextMatch.player2 = winner;\n            }\n            \n            updatedMatches[nextMatchIndex2] = nextMatch;\n          }\n        }\n      }\n      \n      return updatedMatches;\n    });\n  };\n  \n  // Check if all matches in current round are completed\n  const canAdvanceRound = () => {\n    const currentRoundMatches = matches.filter(m => m.round === currentRound);\n    return currentRoundMatches.length > 0 && currentRoundMatches.every(m => \n      m.state === MATCH_STATES.PLAYER1_WIN || m.state === MATCH_STATES.PLAYER2_WIN\n    );\n  };\n  \n  // Get players who are still in the tournament (not eliminated)\n  const getActivePlayers = () => {\n    const eliminatedPlayerIds = new Set();\n    \n    // Find all eliminated players\n    matches.forEach(match => {\n      if (match.state === MATCH_STATES.PLAYER1_WIN && match.player2) {\n        eliminatedPlayerIds.add(match.player2.id);\n      } else if (match.state === MATCH_STATES.PLAYER2_WIN && match.player1) {\n        eliminatedPlayerIds.add(match.player1.id);\n      }\n    });\n    \n    // Return active players\n    return participants.filter(p => !eliminatedPlayerIds.has(p.id));\n  };\n  \n  // Advance to next round\n  const advanceRound = () => {\n    if (currentRound < totalRounds - 1) {\n      setCurrentRound(prevRound => prevRound + 1);\n    } else {\n      // Tournament is completed\n      const finalMatch = matches.find(m => m.round === totalRounds - 1 && m.matchIndex === 0);\n      if (finalMatch) {\n        const winner = finalMatch.state === MATCH_STATES.PLAYER1_WIN ? \n          finalMatch.player1 : finalMatch.player2;\n        setChampion(winner);\n      }\n      setTournamentComplete(true);\n    }\n  };\n  \n  const addParticipant = () => {\n    if (participants.length < tournamentSize) {\n      setParticipants([\n        ...participants,\n        { \n          id: crypto.randomUUID(),\n          login: `Player ${participants.length + 1}`, \n          avatar: `/mghalmi.jpg`, \n          ready: true,\n          is_user: false\n        }\n      ]);\n    }\n  };\n  \n  const removeParticipant = (id) => {\n    if (participants.length > 1) {\n      setParticipants(participants.filter(player => player.id !== id));\n    }\n  };\n  \n  const changeParticipantName = (id, newLogin) => {\n    setParticipants(participants.map(player => \n      player.id === id ? { ...player, login: newLogin } : player\n    ));\n  };\n  \n  const startTournament = () => {\n    initializeTournament();\n  };\n  \n  const resetTournament = () => {\n    setTournamentStarted(false);\n    setCurrentRound(0);\n    setMatches([]);\n    setTournamentComplete(false);\n    setChampion(null);\n  };\n\n  // Start a match in PingPongGame\n  const handlePlayMatch = (match) => {\n    setPlayingMatch(match);\n  };\n\n  // Handle winner from PingPongGame\n  const handleGameEnd = (winner) => {\n    if (!playingMatch) return;\n    const matchState =\n      winner.id === playingMatch.player1.id\n        ? MATCH_STATES.PLAYER1_WIN\n        : MATCH_STATES.PLAYER2_WIN;\n    handleMatchUpdate(playingMatch.round, playingMatch.matchIndex, matchState);\n    setPlayingMatch(null);\n  };\n\n  return (\n    <div className=\"h-full w-full text-white\">\n      <div className=\"flex items-center justify-center min-h-[calc(100vh-80px)] px-4\">\n        <div className=\"w-full max-w-md md:max-w-2xl lg:max-w-4xl xl:max-w-6xl\">\n          <h1 className=\"text-center text-4xl md:text-5xl font-bold mb-8\">\n            {tournamentStarted ? tournamentName : \"Local Tournament\"}\n          </h1>\n          \n          {!tournamentStarted && (\n            <div className=\"space-y-6\">\n              {/* Tournament Settings */}\n              <div className=\"bg-[#1a1d23] rounded-lg p-6 border border-gray-700/50\">\n                <h2 className=\"text-2xl font-semibold mb-6\">Tournament Setup</h2>\n                \n                <div className=\"mb-6\">\n                  <label className=\"block text-gray-300 mb-2 text-lg\">Tournament Name</label>\n                  <input\n                    type=\"text\"\n                    value={tournamentName}\n                    onChange={(e) => setTournamentName(e.target.value)}\n                    className=\"bg-[#2a2f3a] text-white rounded-lg px-4 py-3 w-full outline-none focus:ring-2 focus:ring-blue-500 border border-gray-600 text-lg\"\n                    placeholder=\"Enter tournament name\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"mb-6\">\n                  <label className=\"block text-gray-300 mb-3 text-lg\">Tournament Size</label>\n                  <div className=\"grid grid-cols-3 gap-3\">\n                    {[4, 8, 16].map(size => (\n                      <button \n                        key={size} \n                        className={`py-3 px-4 rounded-lg font-medium transition-colors ${tournamentSize === size ? \n                          'bg-blue-600 text-white' : \n                          'bg-[#2a2f3a] text-gray-300 hover:bg-[#3a3f4a] border border-gray-600'}`}\n                        onClick={() => setTournamentSize(size)}\n                      >\n                        {size} Players\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Participants List */}\n              <div className=\"bg-[#1a1d23] rounded-lg p-6 border border-gray-700/50\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-2xl font-semibold text-white\">Participants ({participants.length}/{tournamentSize})</h3>\n                  <button\n                    onClick={addParticipant}\n                    disabled={participants.length >= tournamentSize}\n                    className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n                      participants.length < tournamentSize\n                        ? 'bg-blue-600 hover:bg-blue-700 text-white'\n                        : 'bg-gray-600 cursor-not-allowed text-gray-400'\n                    }`}\n                  >\n                    Add Player\n                  </button>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {participants.map(player => (\n                    <ParticipantItem\n                      key={player.id}\n                      player={player}\n                      removeParticipant={removeParticipant}\n                      changeParticipantName={changeParticipantName}\n                    />\n                  ))}\n                </div>\n                \n                {participants.length < tournamentSize && (\n                  <div className=\"text-yellow-400 text-sm mt-3\">\n                    You need to add {tournamentSize - participants.length} more players \n                  </div>\n                )}\n              </div>\n              \n              {/* Start Button */}\n              <div className=\"text-center\">\n                <button\n                  onClick={startTournament}\n                  disabled={participants.length < tournamentSize || !tournamentName}\n                  className={`w-full max-w-md text-white font-semibold rounded-lg py-4 text-xl transition-all ${\n                    participants.length >= tournamentSize && tournamentName &&\n                    !participants.some(participant => !participant.login || participant.login.trim() === '') &&\n                    new Set(participants.map(p => p.login?.trim())).size === participants.filter(p => p.login?.trim()).length\n                      ? 'bg-green-600 hover:bg-green-700'\n                      : 'bg-gray-600 cursor-not-allowed'\n                  }`}\n                >\n                  Start Tournament\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {/* Tournament Started View */}\n          {tournamentStarted && !tournamentComplete && (\n            <div className=\"space-y-6\">\n              {/* If a match is being played, show PingPongGame */}\n              {playingMatch ? (\n                <PingPongGame\n                  player1={playingMatch.player1}\n                  player2={playingMatch.player2}\n                  onGameEnd={handleGameEnd}\n                  round={playingMatch.round + 1}\n                  match={playingMatch.matchIndex + 1}\n                />\n              ) : (\n                <>\n                  <RoundControls\n                    currentRound={currentRound}\n                    totalRounds={totalRounds}\n                    onAdvanceRound={advanceRound}\n                    canAdvance={canAdvanceRound()}\n                  />\n                  <TournamentBracket\n                    participants={participants}\n                    tournamentSize={tournamentSize}\n                    matches={matches}\n                    currentRound={currentRound}\n                    onMatchUpdate={handleMatchUpdate}\n                    onPlayMatch={handlePlayMatch} // Pass this to bracket\n                  />\n                  \n                  <div className=\"bg-[#1a1d23] rounded-lg p-6 border border-gray-700/50\">\n                    <h3 className=\"text-xl font-semibold text-white mb-4\">Active Players</h3>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n                      {getActivePlayers().map(player => (\n                        <div key={player.id} className=\"flex flex-col items-center bg-[#2a2f3a] rounded-lg p-3 border border-gray-600\">\n                          <div className=\"w-12 h-12 rounded-full bg-[#3a3f4a] overflow-hidden border-2 border-green-500\">\n                            <Image \n                              src={player.avatar} \n                              alt={player.login} \n                              width={48} \n                              height={48}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          </div>\n                          <div className=\"text-green-400 text-sm mt-2 truncate max-w-full font-medium\">\n                            {player.login}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n          \n          {/* Tournament Complete View */}\n          {tournamentComplete && (\n            <div className=\"text-center space-y-6\">\n              <div className=\"bg-[#1a1d23] rounded-lg p-8 border border-gray-700/50\">\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"bg-gradient-to-b from-yellow-400 to-yellow-600 p-2 rounded-full mb-6\">\n                    <div className=\"w-32 h-32 rounded-full bg-[#2a2f3a] overflow-hidden border-4 border-yellow-500\">\n                      <Image \n                        src={champion?.avatar || '/mghalmi.jpg'} \n                        alt={champion?.login || 'Champion'} \n                        width={128} \n                        height={128}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <h2 className=\"text-3xl font-bold text-white mb-2\">🏆 Tournament Champion</h2>\n                  <div className=\"text-yellow-400 text-4xl font-bold mb-8\">{champion?.login || 'Unknown'}</div>\n                </div>\n              </div>\n              \n              <TournamentBracket\n                participants={participants}\n                tournamentSize={tournamentSize}\n                matches={matches}\n                currentRound={currentRound}\n                onMatchUpdate={() => {}} // No more updates allowed\n              />\n              \n              <div className=\"flex justify-center space-x-4\">\n                <button\n                  onClick={resetTournament}\n                  className=\"px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium text-lg transition-colors\"\n                >\n                  New Tournament\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LocalTournamentMode;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1674, "column": 0}, "map": {"version":3,"sources":["file:///home/sleeps/ft_transcendence0/src/app/%28main%29/play/tournament/OnlineTournament.tsx"],"sourcesContent":["\"use client\";\n\nimport Image from 'next/image';\nimport { useState, useEffect } from 'react';\nimport {MATCH_STATES} from '../../../../data/mockData';\nimport TournamentBracket from './TournamentBracket';\nimport { user, onlineFriends } from '@/data/mockData';\n\nconst OnlinePlayMode = ({ onInvitePlayer, pendingInvites, sentInvites }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [friends, setFriends] = useState(onlineFriends);\n  \n  // Filter online players based on search query\n  const filteredPlayers = friends.filter(player =>\n    player.name?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  \n  // Get button state for a player\n  const getPlayerButtonState = (player) => {\n    if (pendingInvites.has(player.name)) {\n      return { text: 'Pending...', disabled: true, color: 'bg-yellow-600' };\n    }\n    if (sentInvites.has(player.name)) {\n      return { text: 'Invited', disabled: true, color: 'bg-blue-600' };\n    }\n    return { text: 'Invite', disabled: false, color: 'bg-green-600 hover:bg-green-500' };\n  };\n  \n  return (\n    <div className=\"mt-4 p-3 bg-gray-700/50 rounded-lg border border-gray-600\">\n      <h4 className=\"text-white text-sm font-medium mb-2\">Find Players</h4>\n      <div className=\"relative mb-3\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by username...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"w-full bg-gray-800 text-white rounded-lg pl-10 pr-4 py-2 outline-none focus:ring-1 focus:ring-indigo-500 border border-gray-600\"\n        />\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-400 absolute left-3 top-2.5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" />\n        </svg>\n      </div>\n      <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n        {filteredPlayers.length > 0 ? (\n          filteredPlayers.map((player) => {\n            const buttonState = getPlayerButtonState(player);\n            return (\n              <div key={player.name} className=\"flex items-center justify-between bg-gray-800 rounded-lg p-2 border border-gray-700\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full overflow-hidden mr-2 border border-gray-500\">\n                    <Image \n                      src={player.avatar} \n                      alt={player.name} \n                      width={32} \n                      height={32}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <div>\n                    <div className=\"text-white text-sm\">{player.name}</div>\n                    <div className=\"flex items-center text-xs\">\n                      <div className={`w-1.5 h-1.5 rounded-full mr-1 ${\n                        player.GameStatus === 'Available' ? 'bg-green-500' : \n                        player.GameStatus === 'In a match' ? 'bg-yellow-500' : 'bg-red-500'\n                      }`}></div>\n                      <span className={\n                        player.GameStatus === 'Available' ? 'text-green-400' : \n                        player.GameStatus === 'In a match' ? 'text-yellow-400' : 'text-red-400'\n                      }>\n                        {player.GameStatus}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <button \n                  onClick={() => onInvitePlayer(player)}\n                  disabled={buttonState.disabled || player.GameStatus !== 'Available'}\n                  className={`px-3 py-1 rounded text-xs font-medium transition-colors ${\n                    player.GameStatus !== 'Available'\n                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                      : `${buttonState.color} text-white`\n                  }`}\n                >\n                  {player.GameStatus !== 'Available' ? 'Unavailable' : buttonState.text}\n                </button>\n              </div>\n            );\n          })\n        ) : (\n          <div className=\"text-center py-4 text-gray-400\">\n            No players found matching your search\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Main Tournament Component\nexport default function OnlineTournament() {\n  const [tournamentState, setTournamentState] = useState('setup'); // setup, lobby, in_progress\n  const [tournamentName, setTournamentName] = useState('Online Pong Championship');\n  const [tournamentSize, setTournamentSize] = useState(4);\n  const [tournamentCode, setTournamentCode] = useState('');\n  const [currentRound, setCurrentRound] = useState(0);\n  const [participants, setParticipants] = useState([{\n    id: user.nickname, \n    login: user.name, \n    avatar: user.avatar,\n    nickname: user.nickname,\n    isHost: true\n  }]);\n  const [matches, setMatches] = useState([]);\n  const [sentInvites, setSentInvites] = useState(new Map());\n  const [pendingInvites, setPendingInvites] = useState(new Map());\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [champion, setChampion] = useState(null);\n\n  // Generate tournament code when creating tournament\n  useEffect(() => {\n    if (tournamentState === 'lobby' && !tournamentCode) {\n      const code = Math.random().toString(36).substring(2, 8).toUpperCase();\n      setTournamentCode(code);\n    }\n  }, [tournamentState, tournamentCode]);\n\n  // Handle match updates (simulation of play)\n  const handleMatchUpdate = (roundIndex, matchIndex, newState) => {\n    setMatches(prevMatches => {\n      const newMatches = [...prevMatches];\n      const matchToUpdate = newMatches.find(m => m.round === roundIndex && m.matchIndex === matchIndex);\n      \n      if (matchToUpdate) {\n        matchToUpdate.state = newState;\n        \n        // If the match is over, update the next round's match\n        if (newState === MATCH_STATES.PLAYER1_WIN || newState === MATCH_STATES.PLAYER2_WIN) {\n          const nextRound = roundIndex + 1;\n          const nextMatchIndex = Math.floor(matchIndex / 2);\n          const isFirstMatch = matchIndex % 2 === 0;\n          const nextMatch = newMatches.find(m => m.round === nextRound && m.matchIndex === nextMatchIndex);\n          \n          if (nextMatch) {\n            const winner = newState === MATCH_STATES.PLAYER1_WIN ? matchToUpdate.player1 : matchToUpdate.player2;\n            if (isFirstMatch) {\n              nextMatch.player1 = winner;\n            } else {\n              nextMatch.player2 = winner;\n            }\n          }\n          \n          // Check if this is the final match\n          if (roundIndex === Math.log2(tournamentSize) - 1) {\n            const winner = newState === MATCH_STATES.PLAYER1_WIN ? matchToUpdate.player1 : matchToUpdate.player2;\n            setChampion(winner);\n            setTournamentComplete(true);\n          }\n          \n          // Check if all matches in the current round are complete\n          const roundMatches = newMatches.filter(m => m.round === roundIndex);\n          const allMatchesComplete = roundMatches.every(m => \n            m.state === MATCH_STATES.PLAYER1_WIN || m.state === MATCH_STATES.PLAYER2_WIN\n          );\n          \n          // Move to next round if all matches are complete\n          if (allMatchesComplete && nextRound < Math.log2(tournamentSize)) {\n            setCurrentRound(nextRound);\n          }\n        }\n      }\n      return newMatches;\n    });\n  };\n\n  // Start tournament logic\n  const startTournament = () => {\n    if (participants.length < 4) {\n      alert('You need at least 4 players to start the tournament!');\n      return;\n    }\n    \n    // Initialize tournament bracket\n    const initialMatches = [];\n    const rounds = Math.log2(tournamentSize);\n    \n    // First round\n    for (let i = 0; i < tournamentSize / 2; i++) {\n      const player1 = participants[i * 2] || null;\n      const player2 = participants[i * 2 + 1] || null;\n      initialMatches.push({\n        round: 0,\n        matchIndex: i,\n        player1,\n        player2,\n        state: MATCH_STATES.WAITING\n      });\n    }\n    \n    // Subsequent rounds\n    for (let round = 1; round < rounds; round++) {\n      const matchesInRound = tournamentSize / Math.pow(2, round + 1);\n      for (let match = 0; match < matchesInRound; match++) {\n        initialMatches.push({\n          round,\n          matchIndex: match,\n          player1: null,\n          player2: null,\n          state: MATCH_STATES.WAITING\n        });\n      }\n    }\n    \n    setMatches(initialMatches);\n    setTournamentState('in_progress');\n  };\n\n  // Invite a specific player to tournament\n  const handleInvitePlayer = (player) => {\n    if (participants.length >= tournamentSize) {\n      alert('Tournament is full!');\n      return;\n    }\n    \n    // Add to sent invites\n    setSentInvites(prev => new Map(prev).set(player.name, {\n      player,\n      timestamp: Date.now()\n    }));\n    \n    // Simulate invitation response after 2 seconds\n    setTimeout(() => {\n      const accepted = Math.random() > 0.3; // 70% chance of acceptance\n      \n      if (accepted) {\n        // Remove from sent invites and add player to participants\n        setSentInvites(prev => {\n          const newMap = new Map(prev);\n          newMap.delete(player.name);\n          return newMap;\n        });\n        \n        // Add player to participants\n        setParticipants(prev => {\n          if (prev.some(p => p.nickname === player.nickname)) return prev;\n          return [...prev, {\n            id: player.nickname,\n            login: player.name,\n            avatar: player.avatar,\n            nickname: player.nickname,\n            isHost: false\n          }];\n        });\n      } else {\n        // Remove from sent invites\n        setSentInvites(prev => {\n          const newMap = new Map(prev);\n          newMap.delete(player.name);\n          return newMap;\n        });\n        alert(`${player.name} declined the tournament invitation.`);\n      }\n    }, 2000);\n  };\n\n  // Leave tournament\n  const leaveTournament = () => {\n    setParticipants([{\n      id: user.nickname, \n      login: user.name, \n      avatar: user.avatar,\n      nickname: user.nickname,\n      isHost: true\n    }]);\n    setMatches([]);\n    setCurrentRound(0);\n    setTournamentState('setup');\n    setTournamentCode('');\n    setSentInvites(new Map());\n    setPendingInvites(new Map());\n    setTournamentComplete(false);\n    setChampion(null);\n  };\n\n  // Remove participant (host only)\n  const removeParticipant = (playerNickname) => {\n    if (playerNickname === user.nickname) return; // Can't remove host\n    setParticipants(prev => prev.filter(p => p.nickname !== playerNickname));\n  };\n\n  // Reset tournament\n  const resetTournament = () => {\n    leaveTournament();\n  };\n\n  return (\n    <div className=\"bg-gray-800/70 rounded-xl p-4 backdrop-blur-sm border border-gray-700 max-w-7xl mx-auto\">\n      <h2 className=\"text-2xl font-bold text-white mb-6 text-center\">\n        Online Tournament Mode\n      </h2>\n      \n      {/* Tournament Setup Section */}\n      {tournamentState === 'setup' && (\n        <div className=\"bg-gray-800/80 rounded-lg p-5 border border-gray-700 shadow-lg\">\n          <h3 className=\"text-white text-lg font-semibold mb-3\">Create Tournament</h3>\n          <div className=\"mb-4\">\n            <label className=\"block text-white text-sm mb-1\">Tournament Name</label>\n            <input \n              type=\"text\" \n              value={tournamentName}\n              onChange={(e) => setTournamentName(e.target.value)}\n              className=\"w-full bg-gray-700 text-white rounded px-3 py-2 outline-none focus:ring-2 focus:ring-indigo-500 border border-gray-600\"\n              placeholder=\"Enter tournament name\"\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-white text-sm mb-2\">Tournament Size</label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {[4, 8, 16].map(size => (\n                <button \n                  key={size} \n                  className={`py-2 px-3 rounded-lg ${tournamentSize === size ? \n                    'bg-indigo-600 text-white' : \n                    'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}\n                  onClick={() => setTournamentSize(size)}\n                >\n                  {size} Players\n                </button>\n              ))}\n            </div>\n          </div>\n          <button \n            onClick={() => setTournamentState('lobby')}\n            disabled={!tournamentName || tournamentName.trim().length == 0}\n            className={`w-full text-white font-medium rounded-lg py-2.5 transition-all ${\n                     tournamentName && tournamentName.trim().length != 0\n                      ? 'bg-gradient-to-r from-violet-600 to-indigo-600 hover:brightness-110'\n                      : 'bg-gray-600 cursor-not-allowed'\n                  }`}\n          >\n            Create Tournament\n          </button>\n        </div>\n      )}\n      \n      {/* Tournament Lobby Section */}\n      {tournamentState === 'lobby' && (\n        <div className=\"bg-gray-800/80 rounded-lg border border-gray-700 shadow-lg overflow-hidden\">\n          <div className=\"bg-indigo-900/50 p-4 border-b border-indigo-500/30\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-white text-lg font-semibold\">{tournamentName}</h3>\n              <span className=\"px-3 py-1 bg-green-600/70 rounded-full text-white text-xs font-medium\">\n                Waiting for Players\n              </span>\n            </div>\n            <div className=\"mt-2 flex items-center justify-between\">\n              <div className=\"text-gray-300 text-sm\">\n                Players: {participants.length}/{tournamentSize}\n              </div>\n              <div className=\"text-gray-300 text-sm\">\n                Code: <span className=\"font-mono font-bold\">{tournamentCode}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"p-4\">\n            <h4 className=\"text-white font-medium mb-3\">Participants</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 mb-4 max-h-48 overflow-y-auto\">\n              {participants.map((player, index) => (\n                <div key={index} className=\"flex items-center justify-between bg-gray-700 rounded-lg p-2 border border-gray-600\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 rounded-full overflow-hidden mr-2 border border-indigo-400/60\">\n                      <Image \n                        src={player.avatar || \"/mghalmi.jpg\"} \n                        alt={player.login} \n                        width={32} \n                        height={32}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                    <div className=\"truncate max-w-[100px]\">\n                      <div className=\"text-white text-sm truncate\">{player.login}</div>\n                      {player.isHost && (\n                        <div className=\"text-indigo-400 text-xs\">Host</div>\n                      )}\n                    </div>\n                  </div>\n                  {!player.isHost && (\n                    <button \n                      onClick={() => removeParticipant(player.nickname)}\n                      className=\"text-red-400 hover:text-red-300 p-1\"\n                      title=\"Remove participant\"\n                    >\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n                      </svg>\n                    </button>\n                  )}\n                </div>\n              ))}\n              {/* Empty slots */}\n              {Array.from({ length: tournamentSize - participants.length }).map((_, index) => (\n                <div key={`empty-${index}`} className=\"flex items-center justify-center bg-gray-700/50 rounded-lg p-2 border border-gray-600 border-dashed\">\n                  <div className=\"text-gray-400 text-sm\">Waiting...</div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Online Play Mode for inviting players */}\n            <OnlinePlayMode \n              onInvitePlayer={handleInvitePlayer} \n              pendingInvites={pendingInvites}\n              sentInvites={sentInvites}\n            />\n            \n            <div className=\"flex justify-between gap-3 mt-6\">\n              <button \n                onClick={leaveTournament}\n                className=\"flex-grow py-2 bg-red-600/70 hover:bg-red-500 rounded-lg text-white font-medium transition-colors\"\n              >\n                Leave Tournament\n              </button>\n              <button \n                onClick={startTournament}\n                disabled={participants.length < 4}\n                className={`flex-grow py-2 rounded-lg font-medium transition-all ${\n                  participants.length >= 4 \n                    ? 'bg-gradient-to-r from-green-600 to-emerald-600 hover:brightness-110 text-white' \n                    : 'bg-gray-700 text-gray-400 cursor-not-allowed'\n                }`}\n              >\n                Start Tournament\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Tournament Progress Section */}\n      {tournamentState === 'in_progress' && !tournamentComplete && (\n        <div className=\"bg-gray-800/80 rounded-lg border border-gray-700 shadow-lg overflow-hidden\">\n          <div className=\"bg-indigo-900/50 p-4 border-b border-indigo-500/30\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-white text-lg font-semibold\">{tournamentName}</h3>\n              <span className=\"px-3 py-1 bg-yellow-600/70 rounded-full text-white text-xs font-medium\">\n                Tournament in Progress\n              </span>\n            </div>\n            <div className=\"mt-2 flex justify-between items-center\">\n              <div className=\"text-gray-300 text-sm\">Round {currentRound + 1}/{Math.log2(tournamentSize)}</div>\n            </div>\n          </div>\n          <div className=\"p-4\">\n            <TournamentBracket \n              participants={participants}\n              tournamentSize={participants.length}\n              matches={matches}\n              currentRound={currentRound}\n              onMatchUpdate={handleMatchUpdate}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Tournament Complete View */}\n      {tournamentComplete && (\n        <div className=\"bg-gray-800/80 rounded-lg border border-gray-700 shadow-lg overflow-hidden\">\n          <div className=\"bg-green-900/50 p-4 border-b border-green-500/30\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-white text-lg font-semibold\">{tournamentName}</h3>\n              <span className=\"px-3 py-1 bg-green-600/70 rounded-full text-white text-xs font-medium\">\n                Tournament Complete\n              </span>\n            </div>\n          </div>\n          <div className=\"p-4\">\n            <div className=\"flex flex-col items-center mb-6\">\n              <div className=\"bg-gradient-to-b from-yellow-400 to-yellow-600 p-1 rounded-full mb-4\">\n                <div className=\"w-24 h-24 rounded-full bg-gray-600 overflow-hidden border-4 border-yellow-500\">\n                  <Image \n                    src={champion?.avatar || '/mghalmi.jpg'} \n                    alt={champion?.login || 'Champion'} \n                    width={96} \n                    height={96}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n              \n              <h3 className=\"text-2xl text-white mb-1\">Tournament Champion</h3>\n              <div className=\"text-yellow-400 text-3xl font-bold mb-6\">{champion?.login || 'Unknown'}</div>\n            </div>\n            \n            <TournamentBracket \n              participants={participants}\n              tournamentSize={participants.length}\n              matches={matches}\n              currentRound={currentRound}\n              onMatchUpdate={() => {}} // No more updates allowed\n            />\n            \n            <div className=\"mt-8 flex space-x-4 justify-center\">\n              <button\n                onClick={resetTournament}\n                className=\"px-4 py-2 bg-indigo-600 hover:bg-indigo-500 text-white rounded-lg\"\n              >\n                New Tournament\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;;AAQA,MAAM,iBAAiB,CAAC,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE;;IACrE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,0HAAA,CAAA,gBAAa;IAEpD,8CAA8C;IAC9C,MAAM,kBAAkB,QAAQ,MAAM,CAAC,CAAA,SACrC,OAAO,IAAI,EAAE,cAAc,SAAS,YAAY,WAAW;IAG7D,gCAAgC;IAChC,MAAM,uBAAuB,CAAC;QAC5B,IAAI,eAAe,GAAG,CAAC,OAAO,IAAI,GAAG;YACnC,OAAO;gBAAE,MAAM;gBAAc,UAAU;gBAAM,OAAO;YAAgB;QACtE;QACA,IAAI,YAAY,GAAG,CAAC,OAAO,IAAI,GAAG;YAChC,OAAO;gBAAE,MAAM;gBAAW,UAAU;gBAAM,OAAO;YAAc;QACjE;QACA,OAAO;YAAE,MAAM;YAAU,UAAU;YAAO,OAAO;QAAkC;IACrF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAsC;;;;;;0BACpD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,MAAK;wBACL,aAAY;wBACZ,OAAO;wBACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;wBAC9C,WAAU;;;;;;kCAEZ,6LAAC;wBAAI,OAAM;wBAA6B,WAAU;wBAAgD,SAAQ;wBAAY,MAAK;kCACzH,cAAA,6LAAC;4BAAK,UAAS;4BAAU,GAAE;4BAAmH,UAAS;;;;;;;;;;;;;;;;;0BAG3J,6LAAC;gBAAI,WAAU;0BACZ,gBAAgB,MAAM,GAAG,IACxB,gBAAgB,GAAG,CAAC,CAAC;oBACnB,MAAM,cAAc,qBAAqB;oBACzC,qBACE,6LAAC;wBAAsB,WAAU;;0CAC/B,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;4CACJ,KAAK,OAAO,MAAM;4CAClB,KAAK,OAAO,IAAI;4CAChB,OAAO;4CACP,QAAQ;4CACR,WAAU;;;;;;;;;;;kDAGd,6LAAC;;0DACC,6LAAC;gDAAI,WAAU;0DAAsB,OAAO,IAAI;;;;;;0DAChD,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAI,WAAW,CAAC,8BAA8B,EAC7C,OAAO,UAAU,KAAK,cAAc,iBACpC,OAAO,UAAU,KAAK,eAAe,kBAAkB,cACvD;;;;;;kEACF,6LAAC;wDAAK,WACJ,OAAO,UAAU,KAAK,cAAc,mBACpC,OAAO,UAAU,KAAK,eAAe,oBAAoB;kEAExD,OAAO,UAAU;;;;;;;;;;;;;;;;;;;;;;;;0CAK1B,6LAAC;gCACC,SAAS,IAAM,eAAe;gCAC9B,UAAU,YAAY,QAAQ,IAAI,OAAO,UAAU,KAAK;gCACxD,WAAW,CAAC,wDAAwD,EAClE,OAAO,UAAU,KAAK,cAClB,iDACA,GAAG,YAAY,KAAK,CAAC,WAAW,CAAC,EACrC;0CAED,OAAO,UAAU,KAAK,cAAc,gBAAgB,YAAY,IAAI;;;;;;;uBApC/D,OAAO,IAAI;;;;;gBAwCzB,mBAEA,6LAAC;oBAAI,WAAU;8BAAiC;;;;;;;;;;;;;;;;;AAO1D;GAzFM;KAAA;AA4FS,SAAS;;IACtB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,UAAU,4BAA4B;IAC7F,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QAAC;YAChD,IAAI,0HAAA,CAAA,OAAI,CAAC,QAAQ;YACjB,OAAO,0HAAA,CAAA,OAAI,CAAC,IAAI;YAChB,QAAQ,0HAAA,CAAA,OAAI,CAAC,MAAM;YACnB,UAAU,0HAAA,CAAA,OAAI,CAAC,QAAQ;YACvB,QAAQ;QACV;KAAE;IACF,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACzC,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,IAAI;IACnD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,IAAI;IACzD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,oDAAoD;IACpD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,IAAI,oBAAoB,WAAW,CAAC,gBAAgB;gBAClD,MAAM,OAAO,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,GAAG,WAAW;gBACnE,kBAAkB;YACpB;QACF;qCAAG;QAAC;QAAiB;KAAe;IAEpC,4CAA4C;IAC5C,MAAM,oBAAoB,CAAC,YAAY,YAAY;QACjD,WAAW,CAAA;YACT,MAAM,aAAa;mBAAI;aAAY;YACnC,MAAM,gBAAgB,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,cAAc,EAAE,UAAU,KAAK;YAEtF,IAAI,eAAe;gBACjB,cAAc,KAAK,GAAG;gBAEtB,sDAAsD;gBACtD,IAAI,aAAa,0HAAA,CAAA,eAAY,CAAC,WAAW,IAAI,aAAa,0HAAA,CAAA,eAAY,CAAC,WAAW,EAAE;oBAClF,MAAM,YAAY,aAAa;oBAC/B,MAAM,iBAAiB,KAAK,KAAK,CAAC,aAAa;oBAC/C,MAAM,eAAe,aAAa,MAAM;oBACxC,MAAM,YAAY,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,aAAa,EAAE,UAAU,KAAK;oBAEjF,IAAI,WAAW;wBACb,MAAM,SAAS,aAAa,0HAAA,CAAA,eAAY,CAAC,WAAW,GAAG,cAAc,OAAO,GAAG,cAAc,OAAO;wBACpG,IAAI,cAAc;4BAChB,UAAU,OAAO,GAAG;wBACtB,OAAO;4BACL,UAAU,OAAO,GAAG;wBACtB;oBACF;oBAEA,mCAAmC;oBACnC,IAAI,eAAe,KAAK,IAAI,CAAC,kBAAkB,GAAG;wBAChD,MAAM,SAAS,aAAa,0HAAA,CAAA,eAAY,CAAC,WAAW,GAAG,cAAc,OAAO,GAAG,cAAc,OAAO;wBACpG,YAAY;wBACZ,sBAAsB;oBACxB;oBAEA,yDAAyD;oBACzD,MAAM,eAAe,WAAW,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK;oBACxD,MAAM,qBAAqB,aAAa,KAAK,CAAC,CAAA,IAC5C,EAAE,KAAK,KAAK,0HAAA,CAAA,eAAY,CAAC,WAAW,IAAI,EAAE,KAAK,KAAK,0HAAA,CAAA,eAAY,CAAC,WAAW;oBAG9E,iDAAiD;oBACjD,IAAI,sBAAsB,YAAY,KAAK,IAAI,CAAC,iBAAiB;wBAC/D,gBAAgB;oBAClB;gBACF;YACF;YACA,OAAO;QACT;IACF;IAEA,yBAAyB;IACzB,MAAM,kBAAkB;QACtB,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,MAAM;YACN;QACF;QAEA,gCAAgC;QAChC,MAAM,iBAAiB,EAAE;QACzB,MAAM,SAAS,KAAK,IAAI,CAAC;QAEzB,cAAc;QACd,IAAK,IAAI,IAAI,GAAG,IAAI,iBAAiB,GAAG,IAAK;YAC3C,MAAM,UAAU,YAAY,CAAC,IAAI,EAAE,IAAI;YACvC,MAAM,UAAU,YAAY,CAAC,IAAI,IAAI,EAAE,IAAI;YAC3C,eAAe,IAAI,CAAC;gBAClB,OAAO;gBACP,YAAY;gBACZ;gBACA;gBACA,OAAO,0HAAA,CAAA,eAAY,CAAC,OAAO;YAC7B;QACF;QAEA,oBAAoB;QACpB,IAAK,IAAI,QAAQ,GAAG,QAAQ,QAAQ,QAAS;YAC3C,MAAM,iBAAiB,iBAAiB,KAAK,GAAG,CAAC,GAAG,QAAQ;YAC5D,IAAK,IAAI,QAAQ,GAAG,QAAQ,gBAAgB,QAAS;gBACnD,eAAe,IAAI,CAAC;oBAClB;oBACA,YAAY;oBACZ,SAAS;oBACT,SAAS;oBACT,OAAO,0HAAA,CAAA,eAAY,CAAC,OAAO;gBAC7B;YACF;QACF;QAEA,WAAW;QACX,mBAAmB;IACrB;IAEA,yCAAyC;IACzC,MAAM,qBAAqB,CAAC;QAC1B,IAAI,aAAa,MAAM,IAAI,gBAAgB;YACzC,MAAM;YACN;QACF;QAEA,sBAAsB;QACtB,eAAe,CAAA,OAAQ,IAAI,IAAI,MAAM,GAAG,CAAC,OAAO,IAAI,EAAE;gBACpD;gBACA,WAAW,KAAK,GAAG;YACrB;QAEA,+CAA+C;QAC/C,WAAW;YACT,MAAM,WAAW,KAAK,MAAM,KAAK,KAAK,2BAA2B;YAEjE,IAAI,UAAU;gBACZ,0DAA0D;gBAC1D,eAAe,CAAA;oBACb,MAAM,SAAS,IAAI,IAAI;oBACvB,OAAO,MAAM,CAAC,OAAO,IAAI;oBACzB,OAAO;gBACT;gBAEA,6BAA6B;gBAC7B,gBAAgB,CAAA;oBACd,IAAI,KAAK,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK,OAAO,QAAQ,GAAG,OAAO;oBAC3D,OAAO;2BAAI;wBAAM;4BACf,IAAI,OAAO,QAAQ;4BACnB,OAAO,OAAO,IAAI;4BAClB,QAAQ,OAAO,MAAM;4BACrB,UAAU,OAAO,QAAQ;4BACzB,QAAQ;wBACV;qBAAE;gBACJ;YACF,OAAO;gBACL,2BAA2B;gBAC3B,eAAe,CAAA;oBACb,MAAM,SAAS,IAAI,IAAI;oBACvB,OAAO,MAAM,CAAC,OAAO,IAAI;oBACzB,OAAO;gBACT;gBACA,MAAM,GAAG,OAAO,IAAI,CAAC,oCAAoC,CAAC;YAC5D;QACF,GAAG;IACL;IAEA,mBAAmB;IACnB,MAAM,kBAAkB;QACtB,gBAAgB;YAAC;gBACf,IAAI,0HAAA,CAAA,OAAI,CAAC,QAAQ;gBACjB,OAAO,0HAAA,CAAA,OAAI,CAAC,IAAI;gBAChB,QAAQ,0HAAA,CAAA,OAAI,CAAC,MAAM;gBACnB,UAAU,0HAAA,CAAA,OAAI,CAAC,QAAQ;gBACvB,QAAQ;YACV;SAAE;QACF,WAAW,EAAE;QACb,gBAAgB;QAChB,mBAAmB;QACnB,kBAAkB;QAClB,eAAe,IAAI;QACnB,kBAAkB,IAAI;QACtB,sBAAsB;QACtB,YAAY;IACd;IAEA,iCAAiC;IACjC,MAAM,oBAAoB,CAAC;QACzB,IAAI,mBAAmB,0HAAA,CAAA,OAAI,CAAC,QAAQ,EAAE,QAAQ,oBAAoB;QAClE,gBAAgB,CAAA,OAAQ,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK;IAC1D;IAEA,mBAAmB;IACnB,MAAM,kBAAkB;QACtB;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAiD;;;;;;YAK9D,oBAAoB,yBACnB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAwC;;;;;;kCACtD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAM,WAAU;0CAAgC;;;;;;0CACjD,6LAAC;gCACC,MAAK;gCACL,OAAO;gCACP,UAAU,CAAC,IAAM,kBAAkB,EAAE,MAAM,CAAC,KAAK;gCACjD,WAAU;gCACV,aAAY;;;;;;;;;;;;kCAGhB,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAM,WAAU;0CAAgC;;;;;;0CACjD,6LAAC;gCAAI,WAAU;0CACZ;oCAAC;oCAAG;oCAAG;iCAAG,CAAC,GAAG,CAAC,CAAA,qBACd,6LAAC;wCAEC,WAAW,CAAC,qBAAqB,EAAE,mBAAmB,OACpD,6BACA,+CAA+C;wCACjD,SAAS,IAAM,kBAAkB;;4CAEhC;4CAAK;;uCAND;;;;;;;;;;;;;;;;kCAWb,6LAAC;wBACC,SAAS,IAAM,mBAAmB;wBAClC,UAAU,CAAC,kBAAkB,eAAe,IAAI,GAAG,MAAM,IAAI;wBAC7D,WAAW,CAAC,+DAA+D,EAClE,kBAAkB,eAAe,IAAI,GAAG,MAAM,IAAI,IAC/C,wEACA,kCACJ;kCACT;;;;;;;;;;;;YAOJ,oBAAoB,yBACnB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAAoC;;;;;;kDAClD,6LAAC;wCAAK,WAAU;kDAAwE;;;;;;;;;;;;0CAI1F,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;4CAAwB;4CAC3B,aAAa,MAAM;4CAAC;4CAAE;;;;;;;kDAElC,6LAAC;wCAAI,WAAU;;4CAAwB;0DAC/B,6LAAC;gDAAK,WAAU;0DAAuB;;;;;;;;;;;;;;;;;;;;;;;;kCAInD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA8B;;;;;;0CAC5C,6LAAC;gCAAI,WAAU;;oCACZ,aAAa,GAAG,CAAC,CAAC,QAAQ,sBACzB,6LAAC;4CAAgB,WAAU;;8DACzB,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DAAI,WAAU;sEACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;gEACJ,KAAK,OAAO,MAAM,IAAI;gEACtB,KAAK,OAAO,KAAK;gEACjB,OAAO;gEACP,QAAQ;gEACR,WAAU;;;;;;;;;;;sEAGd,6LAAC;4DAAI,WAAU;;8EACb,6LAAC;oEAAI,WAAU;8EAA+B,OAAO,KAAK;;;;;;gEACzD,OAAO,MAAM,kBACZ,6LAAC;oEAAI,WAAU;8EAA0B;;;;;;;;;;;;;;;;;;gDAI9C,CAAC,OAAO,MAAM,kBACb,6LAAC;oDACC,SAAS,IAAM,kBAAkB,OAAO,QAAQ;oDAChD,WAAU;oDACV,OAAM;8DAEN,cAAA,6LAAC;wDAAI,OAAM;wDAA6B,WAAU;wDAAU,SAAQ;wDAAY,MAAK;wDAAO,QAAO;wDAAe,aAAY;kEAC5H,cAAA,6LAAC;4DAAK,eAAc;4DAAQ,gBAAe;4DAAQ,GAAE;;;;;;;;;;;;;;;;;2CAzBnD;;;;;oCAgCX,MAAM,IAAI,CAAC;wCAAE,QAAQ,iBAAiB,aAAa,MAAM;oCAAC,GAAG,GAAG,CAAC,CAAC,GAAG,sBACpE,6LAAC;4CAA2B,WAAU;sDACpC,cAAA,6LAAC;gDAAI,WAAU;0DAAwB;;;;;;2CAD/B,CAAC,MAAM,EAAE,OAAO;;;;;;;;;;;0CAO9B,6LAAC;gCACC,gBAAgB;gCAChB,gBAAgB;gCAChB,aAAa;;;;;;0CAGf,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCACC,SAAS;wCACT,WAAU;kDACX;;;;;;kDAGD,6LAAC;wCACC,SAAS;wCACT,UAAU,aAAa,MAAM,GAAG;wCAChC,WAAW,CAAC,qDAAqD,EAC/D,aAAa,MAAM,IAAI,IACnB,mFACA,gDACJ;kDACH;;;;;;;;;;;;;;;;;;;;;;;;YASR,oBAAoB,iBAAiB,CAAC,oCACrC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAAoC;;;;;;kDAClD,6LAAC;wCAAK,WAAU;kDAAyE;;;;;;;;;;;;0CAI3F,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAI,WAAU;;wCAAwB;wCAAO,eAAe;wCAAE;wCAAE,KAAK,IAAI,CAAC;;;;;;;;;;;;;;;;;;kCAG/E,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,qKAAA,CAAA,UAAiB;4BAChB,cAAc;4BACd,gBAAgB,aAAa,MAAM;4BACnC,SAAS;4BACT,cAAc;4BACd,eAAe;;;;;;;;;;;;;;;;;YAOtB,oCACC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAAoC;;;;;;8CAClD,6LAAC;oCAAK,WAAU;8CAAwE;;;;;;;;;;;;;;;;;kCAK5F,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC;4CAAI,WAAU;sDACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;gDACJ,KAAK,UAAU,UAAU;gDACzB,KAAK,UAAU,SAAS;gDACxB,OAAO;gDACP,QAAQ;gDACR,WAAU;;;;;;;;;;;;;;;;kDAKhB,6LAAC;wCAAG,WAAU;kDAA2B;;;;;;kDACzC,6LAAC;wCAAI,WAAU;kDAA2C,UAAU,SAAS;;;;;;;;;;;;0CAG/E,6LAAC,qKAAA,CAAA,UAAiB;gCAChB,cAAc;gCACd,gBAAgB,aAAa,MAAM;gCACnC,SAAS;gCACT,cAAc;gCACd,eAAe,KAAO;;;;;;0CAGxB,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCACC,SAAS;oCACT,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASf;IA7ZwB;MAAA","debugId":null}},
    {"offset": {"line": 2655, "column": 0}, "map": {"version":3,"sources":["file:///home/sleeps/ft_transcendence0/src/app/%28main%29/play/tournament/page.tsx"],"sourcesContent":["\"use client\"\nimport { useEffect, useState } from \"react\";\nimport LocalTournament from \"./LocalTournament\";\nimport OnlineTournament from \"./OnlineTournament\";\nimport { notFound, useSearchParams } from 'next/navigation';\n\n\n// Main Component\nexport default function TournamentPage() {\n const searchParams = useSearchParams();\n  const [gameMode, setGameMode] = useState<\"Local\" | \"Online\" | null>(null);\n\n  useEffect(() => {\n    const modeParam = searchParams.get('mode');\n    if (modeParam === 'Local' || modeParam === 'Online') {\n      setGameMode(modeParam as \"Local\" | \"Online\");\n    } else {\n      notFound();\n    }\n  }, [searchParams]);\n\n     return (\n      <>\n        {gameMode === 'Local' ? (\n          <LocalTournament />\n        ) : gameMode === 'Online' ? (\n          <OnlineTournament />\n        ) : null}\n      </>\n    )\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;AAJA;;;;;AAQe,SAAS;;IACvB,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IAClC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA6B;IAEpE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,MAAM,YAAY,aAAa,GAAG,CAAC;YACnC,IAAI,cAAc,WAAW,cAAc,UAAU;gBACnD,YAAY;YACd,OAAO;gBACL,CAAA,GAAA,qIAAA,CAAA,WAAQ,AAAD;YACT;QACF;mCAAG;QAAC;KAAa;IAEd,qBACC;kBACG,aAAa,wBACZ,6LAAC,mKAAA,CAAA,UAAe;;;;mBACd,aAAa,yBACf,6LAAC,oKAAA,CAAA,UAAgB;;;;mBACf;;AAGZ;GAtBwB;;QACF,qIAAA,CAAA,kBAAe;;;KADb","debugId":null}}]
}