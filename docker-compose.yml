version: '3.8'
services:
  sqlite:
    build: ./sqlite/
    image: sqlite:v0.1
    container_name: sqlite
    restart: unless-stopped
    volumes:
      - sqlite_storage:/db
    networks:
      - ft_transcendence
    healthcheck:
      test: ['CMD', 'ls', '/db']
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    build: ./redis
    image: redis:v0.1
    container_name: redis
    ports:
      - '7000:6379'
    restart: always
    networks:
      - ft_transcendence
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  # backend:
  #   build: ./backend
  #   image: backend:v0.1
  #   container_name: backend
  #   restart: unless-stopped
  #   env_file:
  #     - ./backend/.env
  #   ports:
  #     - '5005:5005'
  #   volumes:
  #     - sqlite_storage:/db
  #   depends_on:
  #     sqlite:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - ft_transcendence
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://10.11.11.2:5005/healthcheck']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   image: frontend:v0.1
  #   container_name: frontend
  #   restart: unless-stopped
  #   env_file:
  #     - ./frontend/.env
  #   ports:
  #     - '3000:3000'
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   networks:
  #     - ft_transcendence

networks:
  ft_transcendence:
    driver: bridge

volumes:
  sqlite_storage:
    driver: local
    driver_opts:
      type: none
      device: ../sqlite_db
      o: bind
